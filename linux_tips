#simple server
python -m http.server
#os version
cat /proc/version
lsb_release -a
uname -a
#crontab -e
#m h dom mon dow commnad
* * * * * date >> ~/time.log
sudo service cron restart
#cron log
grep CRON /var/log/syslog
#cron mail
sudo apt-get install postfix
sudo tail -f /var/mail/brian -n 50
#cron set PATH to load usr module

#cron to launch chromedriver-add following line in first line of crontab
DISPLAY=:0

#NO_PUBLIC_KEY issue
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys KEYID
#replace KEYID with the number shown in the error message

#notification (cron DISPLAY=:0)
notify-send 'title' 'body'

#show automount vboxsf
sudo adduser brian vboxsf

#network service restart
sudo /etc/init.d/networking restart

#Count the number of files in a current directory
ls -f . | wc -l
find . -type f -maxdepth 1 | wc -l
#Count the number of files recursively
find . -type f | wc -l
#Count the number of folders recursively
find . -type d | wc -l
#Count the number of files by "file type"
#recursively counts the number of files, with ".txt" extension,
#in a current directory and all its sub-directories 
find . -type f -name "*.txt" | wc -l
#Count the number of folders recursively
find . -type d | wc -l
#suppress warning
find . -type f -name "*.py" 2>/dev/null
#find and copy
find . -type f -name "*.py" -exec cp {} /tmp/pdfs \;

#sort by time
ls -lt
ls -ltr
#sort by size
ls -lS
ls -lSr

#display disk usage
du -h
du -sh *
du -csh *
df -h
#check memory usage
cat /proc/memoinfo
free -m 
top
vmstat

#remove duplicates line from a file
#sed '!seen[$0]++' <filename>

#fix the unstable wifi 
echo 'options iwlwifi 11n_disable=1' | sudo tee -a /etc/modprobe.d/iwlwifi.conf
reboot

#interrupting docker pull
# Repository xxxx already being pulled by another client. Waiting.
sudo service docker restart

#jekyll
#cd gitio
sudo docker run --rm --label=jekyll --volume=$(pwd):/srv/jekyll \
  -it -p 127.0.0.1:4000:4000 jekyll/jekyll

#python2 notebook
sudo docker run -p 8888:8888 -v "$(pwd):/home/ds/notebooks" dataquestio/python2-starter
sudo docker ps
sudo docker stop xxxxx

$CUR_CONTAINER=`sudo docker ps|pyp "pp[1].split(' ')[0]`
sudo docker stop $CUR_CONTAINER

#save images
sudo docker save xxxx > target.tar
#load image
sudo docker load < target.tar
#mac ox
docker-machine ip
#container shell
docker exec -it 4greg24134 /bin/bash
exit
#persistent container
sudo docker commit [container_id] [name/tag]
#ignore the switch lid
sudo -H gedit /etc/systemd/logind.conf
#Add a line HandleLidSwitch=ignore (make sure it's not commented out!),
#Restart the systemd daemon with this command:
#sudo restart systemd-logind / or reboot

#install deb
sudo dpkg -i xxx.deb

#box resize
VBoxManage clonehd box-disk1.vmdk tmp-disk.vdi --format vdi
VBoxManage modifyhd tmp-disk.vdi --resize 61440
VBoxManage clonehd tmp-disk.vdi resized-disk.vmdk --format vmdk
rm tmp-disk.vdi box-disk1.vmdk
mv resized-disk.vmdk box-disk1.vmdk
#enable ssh
sudo apt-get install openssh-server
#ansible on python3 default machine
#!/usr/bin/python2
#add this shbang to /usr/bin/ansible
# avoid input password when ssh
ssh-agent bash
ssh-add ~/.ssh/id_rsa
#after vagrant authorized_keys deleted by mistake
config.ssh.username and config.ssh.password
#Jupyter notebook config
jupyter notebook --generate-config
#set ip address
sudo ifconfig eth0 192.168.1.132 netmask 255.255.255.0
#Shorten prompt
PS1='\u:\W\$ '
#grep words in files
grep -r 'words' path/to/file/
#grep in dir
grep -rni "std=c++" *
find . -type f -exec grep -H "std=c++" {} \;
#run job in bg
ipython notebook &
#list bg job
jobs
#kill bg job
kill %1 && fg
#bring job back
fg
#search and vi
# pyspark notebook config 
#alias sparknb='DRIVER_PYTHON=jupyter PYSPARK_DRIVER_PYTHON_OPTS="notebook" pyspark'
#in conf/spark-env.sh set PYSPARK_PYTHON=/path/to/python PYSPARK_DRIVER_PYTHON=jupyter
#--executer-memory 8g'
export SPARK_HOME="/home/brian/tools/spark-2.0.0-bin-hadoop2.7"
export PATH=$SPARK_HOME/bin:$PATH
export PATH=$SPARK_HOME/sbin:$PATH
#hadoop config
#topology edit
ansible horton -a "cp -f /vagrant/topology_mappings.data /etc/hadoop/conf/" -u root
#check racks
su hdfs
hdfs fsck -racks
hdfs dfsadmin -report
#yarn
yarn application -list
yarn logs -applicationId application_xxxxx_xx

#grub
sudo vi /etc/default/grub
sudo update-grub

#vboxshared folder permission denied fix
sudo adduser $USER vboxsf
# qemu ssh
remote> sudo systemctl restart sshd.service
local> cd ~/.ssh
local> scp id_rsa.pub user@remote:~/.ssh/id_rsa.pub
local> ssh user@remote
remote> cd ~/.ssh
remote> cat id_rsa.pub >> authorized_keys2
remote> chmod 640 authorized_keys2
remote> rm id_rsa.pub
remote> exit
# qemu headless
> ./start_headless_ubuntu.sh
local> ssh user@remote
# show pid
local> ps 
# shutdown
remote> sudo shutdown 

#vncview screen unlock
loginctl list-sessions
loginctl unlock-session $session
# or
loginctl unlock-sessions
# show vncserver status
vncserver -list
# show system service
systemctl --type service --all
systemctl --type service --state running
service --status-all
service --status-all | grep '\[ + \]'
ls /etc/init.d
#To show all installed unit files use 'systemctl list-unit-files'.

# check port
sudo lsof -i -P | grep LISTEN
sudo netstat -tunlp

The options used in this command have the following meaning:

    -t - Show TCP ports.
    -u - Show UDP ports.
    -n - Show numerical addresses instead of resolving hosts.
    -l - Show only listening ports.
    -p - Show the PID and name of the listenerâ€™s process. This information is shown only if 

# To remove a file extension from all files 
for i in $( ls *.txt ); do mv $i ${i%.*}; done

# change all files with the .log extension to .txt. 
for i in *.log; do mv -- "$i" "${i%.log}.txt"; done

# check weather
curl wttr.in

# cmatrix
# neofetch
# htop
# glances
# cmus
# sl
# iotop
# iftop
# vmstat -m
# vmstat -d
# tcpdump
# netstat -st
# lsof
# pstree
# nethogs
# mpstat
# free -m
# ac -d

# rename 's/^\S+(P\S+)$/$1/' *

# tmux ls
# tmux attatch -t [name]
# ctrl + b d   #detach session
# ctrl + b x   #kill session
